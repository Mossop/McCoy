/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is McCoy.
 *
 * The Initial Developer of the Original Code is
 * the Mozilla Foundation <http://www.mozilla.org/>.
 * Portions created by the Initial Developer are Copyright (C) 2007
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Dave Townsend <dtownsend@oxymoronical.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsISimpleEnumerator;

/**
 * An nsIPasswordPrompt is used by the nsIKeyService in order to request a
 * password from the user when initialising the key store or logging in for
 * the first time in a session.
 */
[scriptable, uuid(ca6518ee-82ad-4822-860a-4c8ea88c48e8)]
interface nsIPasswordPrompt : nsISupports
{
  /**
   * Called when the key store has yet to be initialised. Should return a
   * password for the store. If an empty password is used then the store can
   * be used without any log in by the user.
   * @returns a password to protect the key store.
   */
  AString createPassword();

  /**
   * Called when the key store is used for the first time in a session and it
   * is protected by a password.
   * @param   attempt
   *          The number of log in attempts, starts at 1.
   * @returns a password to use to log in to the key store or null to abort the
   *          log in attempt.
   */
  AString getPassword(in long attempt);
};

/**
 * an nsIKeyPair represents a public/private key pair in the key store. It can
 * be used for signing purposes.
 */
[scriptable, uuid(73ff0fc6-3895-498a-b149-f2c09f7f889b)]
interface nsIKeyPair : nsISupports
{
  /**
   * Key types
   */
  const PRUint32 KEYTYPE_RSA = 1;
  const PRUint32 KEYTYPE_DSA = 2;

  /**
   * Hash algorithms for signing
   */
  const PRUint32 HASHTYPE_MD2    = 1;
  const PRUint32 HASHTYPE_MD5    = 2;
  const PRUint32 HASHTYPE_SHA1   = 3;
  const PRUint32 HASHTYPE_SHA256 = 4;
  const PRUint32 HASHTYPE_SHA384 = 5;
  const PRUint32 HASHTYPE_SHA512 = 6;

  /**
   * The name of the key pair.
   */
  attribute ACString name;

  /**
   * The type of the key, matches the KEYTYPE constants.
   */
  readonly attribute PRUint32 type;

  /**
   * Extracts the SubjectPublicKeyInfo sequence (as defined in RFC 3280), DER
   * encoded and then base64 encoded.
   */
  ACString exportPublicKey();

  /**
   * Exports the private key as a PEM encoded pkcs#8 EncryptedPrivateKeyInfo
   * @param   password
   *          The password to encrypt the data.
   */
  ACString exportPrivateKey(in ACString password);

  /**
   * Signs the data provided using the hash algorithm.
   * @param   aData
   *          The data to sign.
   * @param   aHashType
   *          A HASHTYPE constant for the hash algorithm to use.
   * @returns The signature base 64 encoded.
   */
  ACString signData(in ACString aData, in PRUint32 aHashType);

  /**
   * Verifies that this key was used to generate the signature from the data.
   * @param   aData
   *          The original data.
   * @param   aSignature
   *          The base 64 encoded signature.
   * @returns true if the signature was generated by this key or false otherwise.
   */
  boolean verifyData(in ACString aData, in ACString aSignature);

  /**
   * Deletes this key pair.
   */
  void delete();
};

/**
 * The key service is used to work with the key store.
 */
[scriptable, uuid(58b3c67c-282c-414d-abbf-926b834fcd12)]
interface nsIKeyService : nsISupports
{
  /**
   * Ensures that the key store is initialised and logged in.
   */
  void login();

  /**
   * Logs out of the key store. Any future operations may require logging
   * back in. Generally shouldn't be used, mainly here for automated testing.
   */
  void logout();

  /**
   * Changes the password for the key store. Will throw an error if the old
   * password does not match the current password.
   * @param   oldPassword
   *          The current password for the key store.
   * @param   newPassword
   *          The new password for the key store.
   */
  void changePassword(in AString oldPassword, in AString newPassword);

  /**
   * Provides a custom nsIPasswordPrompt instance to use when requesting
   * passwords from the user.
   * @param   prompt
   *          The nsIPasswordPrompt instance to use or null to revert to the
   *          default instance.
   */
  void setPasswordPrompt(in nsIPasswordPrompt prompt);

  /**
   * Returns an enumeration of all keys in the key store.
   * @returns an nsISimpleEnumerator of nsIKeyPair objects.
   */
  nsISimpleEnumerator enumerateKeys();

  /**
   * Creates a new keypair.
   * @param   aKeyType
   *          The type of key to create, one of the KEYTYPE constants.
   * @returns the new key pair.
   */
  nsIKeyPair createKeyPair(in PRUint32 aKeyType);

  /**
   * Imports a private key from PEM encoded data using the provided password for
   * decryption. Currently only supports pkcs#8 EncryptedPrivateKeyInfo
   * formats the key must be RSA type.
   * @param   data
   *          The PEM encoded data.
   * @param   password
   *          The password to decrypt the data.
   * @param   temporary
   *          If true the key is not permanently added to the key store.
   * @returns the imported key pair.
   */
  nsIKeyPair importPrivateKey(in ACString data, in ACString password, in boolean temporary);
};
